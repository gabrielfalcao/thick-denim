# -*- coding: utf-8 -*-
import os
import sys
import sphinx_rtd_theme

html_theme = "sphinx_rtd_theme"
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]


docs_source_path = os.path.abspath(os.path.dirname(__file__))
project_root = os.path.abspath(os.path.join(docs_source_path, "..", ".."))

sys.path.insert(0, project_root)


from thick_denim.version import version

doctest_path = [project_root]
doctest_global_setup = "import thick_denim"

extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.doctest",
    "sphinx.ext.intersphinx",
    "sphinx.ext.todo",
    "sphinx.ext.coverage",
    "sphinx.ext.ifconfig",
    "sphinx.ext.viewcode",
    "sphinx.ext.githubpages",
    "sphinx_click.ext",
    "sphinx.ext.autosummary",
]
autodoc_default_flags = ["members"]
autosummary_generate = True

templates_path = ["_templates"]

source_suffix = ".rst"

# The master toctree document.
master_doc = "index"

# General information about the project.
project = "Thick Denim"
copyright = "2019, Gabriel Falcão"
author = "Gabriel Falcão <gfalcao@newstore.com>"
release = version

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "fruity"
# pygments_style = "manni"

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True


html_theme_options = {}
html_static_path = ["_static"]
html_sidebars = {
    "**": [
        "about.html",
        "navigation.html",
        "relations.html",  # needs "show_related": True theme option to display
        "searchbox.html",
    ]
}

# -- VARIABLE DEFINITIONS -----------------------------------
rst_epilog = """
.. |tool| replace:: Thick Denim
"""

# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "ThickDenimdoc"


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ("letterpaper" or "a4paper").
    #
    # "papersize": "letterpaper",
    # The font size ("10pt", "11pt" or "12pt").
    #
    # "pointsize": "10pt",
    # Additional stuff for the LaTeX preamble.
    #
    # "preamble": "",
    # Latex figure (float) alignment
    #
    # "figure_align": "htbp",
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (
        master_doc,
        "ThickDenim.tex",
        "Work Fabric Data Tool Documentation",
        "Gabriel Falcão",
        "manual",
    )
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, "thick_denim.cli", "Thick Denim CLI", [author], 1)]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "ThickDenim",
        "Thick Denim",
        author,
        "ThickDenim",
        "Thick-Denim is a python tool that allows querying and cross-referencing GitHub and Jira and processing data into metrics. Provides DSLs to describe queries, references and data processing.",
        "Miscellaneous",
    )
]

# -- Options for Epub output ----------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project
epub_author = author
epub_publisher = author
epub_copyright = copyright

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ""

# A unique identification for the text.
#
# epub_uid = ""

# A list of files that should not be packed into the epub file.
epub_exclude_files = ["search.html"]
intersphinx_mapping = {
    "python": ("https://docs.python.org/3", None),
    "boto": ("https://boto3.amazonaws.com/v1/documentation/api/latest/", None),
    "boto3": (
        "https://boto3.amazonaws.com/v1/documentation/api/latest/",
        None,
    ),
    "click": ("https://click.palletsprojects.com/en/7.x/", None),
    "moto": ("http://docs.getmoto.org/en/latest/", None),
    "paramiko": ("http://docs.paramiko.org/en/2.4/", None),
    "psycopg2": ("http://initd.org/psycopg/docs/", None),
    "pyotp": ("https://pyotp.readthedocs.io/en/latest/", None),
    "sure": ("https://sure.readthedocs.io/en/latest/", None),
    "requests": ("http://docs.python-requests.org/en/master/", None),
}
